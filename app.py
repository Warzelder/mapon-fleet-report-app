import streamlit as st
import datetime
import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
import pandas as pd # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å DataFrame
from io import BytesIO # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel –≤ –ø–∞–º—è—Ç—å

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ mapon_api_client.py
from mapon_api_client import get_fleet_odometer_and_fuel_data

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Streamlit —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–ø–∞—Ä–∫—É Mapon",
    page_icon="üöó",
    layout="wide" # –î–µ–ª–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∏—Ä–æ–∫–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
)

st.title("üöó –û—Ç—á")
st.markdown("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–¥–æ–º–µ—Ç—Ä—É –∏ —Ä–∞—Å—Ö–æ–¥—É —Ç–æ–ø–ª–∏–≤–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

# --- –í–≤–æ–¥ API –∫–ª—é—á–∞ ---
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á.
# –ü—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ Streamlit Cloud, –º—ã —Å–ø—Ä—è—á–µ–º –µ–≥–æ –≤ secrets.toml.
api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Mapon API Key", type="password")

if not api_key:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Mapon API Key –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
    st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞ –∫–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω

# --- –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ ---
st.header("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞")

# –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ UTC
now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
default_start_datetime = now_utc - datetime.timedelta(days=1)
default_end_datetime = now_utc

# –í–∏–¥–∂–µ—Ç—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", value=default_start_datetime.date())
    start_time = st.time_input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (UTC)", value=default_start_datetime.time(), step=300) # —à–∞–≥ 5 –º–∏–Ω—É—Ç
with col2:
    end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=default_end_datetime.date())
    end_time = st.time_input("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (UTC)", value=default_end_datetime.time(), step=300)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ–¥–∏–Ω datetime –æ–±—ä–µ–∫—Ç (–≤ UTC)
# –í–∞–∂–Ω–æ: date_input –∏ time_input –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç naive datetime (–±–µ–∑ tzinfo), –ø–æ—ç—Ç–æ–º—É —è–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º UTC
start_datetime_full = datetime.datetime.combine(start_date, start_time).replace(tzinfo=pytz.utc)
end_datetime_full = datetime.datetime.combine(end_date, end_time).replace(tzinfo=pytz.utc)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
if start_datetime_full > end_datetime_full:
    st.error("–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
    st.stop()

# --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ ---
st.write("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", help="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Mapon"):
    st.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ mapon_api_client.py
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.spinner –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    with st.spinner('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mapon API...'):
        try:
            df = get_fleet_odometer_and_fuel_data(api_key, start_datetime_full, end_datetime_full)
            
            if not df.empty:
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.write("") # –û—Ç—Å—Ç—É–ø
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—á–µ—Ç–∞")
                
                # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ DataFrame ---
                st.dataframe(df.style.highlight_null(), use_container_width=True) # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª–∏ null_color

                # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel ---
                st.write("") # –û—Ç—Å—Ç—É–ø
                st.subheader("–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç")
                
                @st.cache_data # –ö—ç—à–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ
                def convert_df_to_excel(df_to_convert):
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df_to_convert.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–ø–∞—Ä–∫—É')
                        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                        worksheet = writer.sheets['–û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–ø–∞—Ä–∫—É']
                        for i, col in enumerate(df_to_convert.columns):
                            max_len = max(df_to_convert[col].astype(str).map(len).max(), len(col)) + 2
                            worksheet.set_column(i, i, max_len)
                    processed_data = output.getvalue()
                    return processed_data

                excel_data = convert_df_to_excel(df)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel",
                    data=excel_data,
                    file_name=f"Mapon_Fleet_Report_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
            else:
                st.warning("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Mapon API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤.")
        
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API Key –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            st.exception(e) # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏